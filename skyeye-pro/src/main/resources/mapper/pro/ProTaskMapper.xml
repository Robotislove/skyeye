<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.skyeye.dao.ProTaskDao">

    <select id="queryProTaskList" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
			a.id,
			a.task_name taskName,
			a.parent_id pId,
			true lay_is_open,
			e.project_name projectName,
			DATE_FORMAT(a.start_time, '%Y-%m-%d') startTime,
			DATE_FORMAT(a.end_time, '%Y-%m-%d') endTime,
			GROUP_CONCAT(distinct c.user_name) performId,
			d.user_name createId,
			IFNULL(f.process_instance_id, '') processInstanceId,
			a.estimated_workload estimatedWorkload,
			IF(a.actual_workload = 0, '?', a.actual_workload) actualWorkload,
			a.state,
			DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i') createTime
		FROM
			pro_task a
			LEFT JOIN sys_eve_user_staff c ON INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', c.user_id, ','))
			LEFT JOIN sys_eve_user_staff d ON a.create_id = d.user_id
			LEFT JOIN pro_task_process f ON a.id = f.task_id,
			pro_project e
		WHERE a.pro_id = e.id
		<if test="taskName != '' and taskName != null">
			AND a.task_name like '%${taskName}%'
		</if>
		<if test="performId != '' and performId != null">
			AND c.user_name like '%${performId}%'
		</if>
		<if test="createId != '' and createId != null">
			AND d.user_name like '%${createId}%'
		</if>
		<if test="firstTime != '' and firstTime != null and lastTime != '' and lastTime != null">
			AND a.start_time >= #{firstTime} AND #{lastTime} >= a.start_time
		</if>
		GROUP BY a.id
		ORDER BY a.create_time DESC
	</select>
    
	<select id="queryProTaskByTaskName" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			a.id
		FROM
			pro_task a	
		WHERE 
			a.task_name = #{taskName}
		AND a.pro_id = #{proId}
		<if test="id != '' and id != null">
			AND a.id != #{id}
		</if>
	</select>
    
    <insert id="insertProTaskMation" parameterType="java.util.Map">
		insert into pro_task
        (id, task_name, task_type, pro_id, departments, start_time, end_time, perform_id, estimated_workload, actual_workload, task_instructions, enclosure_info,
         parent_id, state, create_id, create_time)
		values(#{id}, #{taskName}, #{taskType}, #{proId}, #{departments}, #{startTime}, #{endTime}, #{performId}, #{estimatedWorkload}, '0', #{taskInstructions}, #{enclosureInfo},
		 #{parentId}, '0', #{createId}, #{createTime})
    </insert>
    
	<select id="queryProTaskMationToDetails" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			a.id,
			a.task_name taskName,
			g.`name` taskTypeName,
			c.department_name departments,
			e.project_name projectName,
			DATE_FORMAT(a.start_time, '%Y-%m-%d') startTime,
			DATE_FORMAT(a.end_time, '%Y-%m-%d') endTime,
			(SELECT 
				GROUP_CONCAT(f.user_name)
			FROM
				pro_task a,
				sys_eve_user_staff f
			WHERE a.id = #{id}
			AND INSTR(CONCAT(',',a.perform_id,','),CONCAT(',',f.user_id,','))
			) performId,
			d.user_name createId,
			a.estimated_workload estimatedWorkload,
			a.task_instructions taskInstructions,
			a.enclosure_info enclosureInfo,
			a.actual_workload actualWorkload,
			a.execution_result executionResult,
			IFNULL(a.execution_enclosure_info, '') executionEnclosureInfo,
			b.task_name parentName,
			a.state,
			DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i') createTime
		FROM
			pro_task a
			LEFT JOIN pro_task b ON a.parent_id = b.id
			LEFT JOIN sys_eve_user_staff d ON a.create_id = d.user_id,
			company_department c,
			pro_project e,
			pro_task_type g
		WHERE
			a.id = #{id}
		AND a.departments = c.id
		AND	a.pro_id = e.id
		AND a.task_type = g.id
	</select>
	
	<select id="queryProTaskMationToEdit" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			a.id,
			a.parent_id pId,
			a.task_name taskName,
			a.task_type taskType,
			a.pro_id proId,
			a.departments,
			DATE_FORMAT(a.start_time, '%Y-%m-%d') startTime,
			DATE_FORMAT(a.end_time, '%Y-%m-%d') endTime,
			a.estimated_workload estimatedWorkload,
			a.task_instructions taskInstructions,
			a.enclosure_info enclosureInfo,
			a.state,
			(c.estimated_workload - SUM(IFNULL(b.estimated_workload, 0))) restWorkload
		FROM
			pro_task a
		LEFT JOIN pro_task c ON a.parent_id = c.id
		LEFT JOIN pro_task b ON b.parent_id = a.parent_id AND ( b.state = 11 OR b.state = 2 OR b.state = 3 OR b.state = 4 )
		WHERE
			a.id = #{id}
	</select>
	
	<select id="queryPerformIdByProTaskId" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			b.user_id id,
			b.user_name `name`,
			b.email
		FROM
			pro_task a,
			sys_eve_user_staff b
		WHERE
			a.id = #{id}
		AND INSTR(CONCAT(',',a.perform_id,','),CONCAT(',',b.user_id,','))
	</select>
	
	<update id="editProTaskMation" parameterType="java.util.Map">
        UPDATE pro_task
        <set>
            task_name = #{taskName},
            task_type = #{taskType},
            pro_id = #{proId},
            departments = #{departments},
            start_time = #{startTime},
            end_time = #{endTime},
            perform_id = #{performId},
            estimated_workload = #{estimatedWorkload},
            task_instructions = #{taskInstructions},
            enclosure_info = #{enclosureInfo}
        </set>
        WHERE id = #{id}
    </update>
    
    <select id="queryProTaskStateAndPidById" parameterType="java.util.Map" resultType="java.util.Map">
    	SELECT
			a.id,
			a.state,
			a.parent_id pId
		FROM
			pro_task a
		WHERE
			a.id = #{id}
    </select>

    <delete id="deleteProTaskMationById" parameterType="java.util.Map">
		DELETE
		FROM
			pro_task
		WHERE
			id = #{id}
	</delete>
	
	<delete id="deleteProTaskProcessMationById" parameterType="java.util.Map">
		DELETE
		FROM
			pro_task_process
		WHERE
			task_id = #{id}
	</delete>
	
	<delete id="deleteAllProTaskProcessMationByPid" parameterType="java.util.Map">
		DELETE
			a.*
		FROM
			pro_task_process a,
			pro_task b
		WHERE
			b.parent_id = #{id}
		AND a.task_id = b.id
	</delete>
	
	<delete id="deleteAllProTaskMationByPid" parameterType="java.util.Map">
		DELETE
		FROM
			pro_task
		WHERE
			parent_id = #{id}
		OR id = #{id}
	</delete>
	
	<select id="queryProTaskMationForApprovalById" resultType="java.util.Map">
		SELECT
			a.id,
			CASE a.parent_id WHEN '0' THEN '主任务' ELSE CONCAT(b.task_name,' [ 拆分子任务  ] ')END fatherOrSon,
			a.task_name taskName,
			g.`name` taskTypeName,
			c.department_name departments,
			e.project_name projectName,
			DATE_FORMAT(a.start_time, '%Y-%m-%d') startTime,
			DATE_FORMAT(a.end_time, '%Y-%m-%d') endTime,
			(SELECT
				GROUP_CONCAT(f.user_name)
			FROM
				pro_task a,
				sys_eve_user_staff f
			WHERE a.id = #{id}
			AND INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', f.user_id, ','))
			) performId,
			a.create_id createId,
			d.user_name userName,
			a.estimated_workload estimatedWorkload,
			a.task_instructions taskInstructions,
			a.enclosure_info enclosureInfo,
			a.state,
			'审核中' stateName,
			DATE_FORMAT(a.create_time, '%Y-%m-%d %H:%i') createTime,
			f.process_instance_id processInstanceId
		FROM
			pro_task a
			LEFT JOIN pro_task b ON a.parent_id = b.id
			LEFT JOIN sys_eve_user_staff d ON a.create_id = d.user_id
		    LEFT JOIN pro_task_process f ON f.task_id = a.id,
			company_department c,
			pro_project e,
			pro_task_type g
		WHERE
			a.id = #{id}
		AND a.departments = c.id
		AND	a.pro_id = e.id
		AND a.task_type = g.id
	</select>

	<update id="updateProTaskStateISInAudit">
		UPDATE pro_task
		<set>
			state = '1'
		</set>
		WHERE id = #{id}
	</update>
	
	<delete id="deleteProTaskProcessById">
		DELETE
		FROM
			pro_task_process
		WHERE
			task_id = #{taskId}
	</delete>
	
	<insert id="insertProTaskProcess" parameterType="java.util.Map">
		insert into pro_task_process
        (id, process_instance_id, task_id, state, type, sub_id, sub_time)
		values(#{id}, #{processInId}, #{taskId}, #{state}, #{type}, #{subId},  #{subTime})
    </insert>
    
	<select id="queryTaskIdByProcessInstanceId" resultType="java.util.Map">
		SELECT
			a.id,
			a.task_id taskId
		FROM
			pro_task_process a
		WHERE
			a.process_instance_id = #{processInstanceId}
		AND a.state = '0'
	</select>
	
	<update id="editProTaskStateAndWorkloadById" parameterType="java.util.Map">
		UPDATE pro_task
		<set>
			state = #{state},
			estimated_workload = #{estimatedWorkload}
		</set>
		WHERE id = #{taskId}
	</update>
	
	<update id="editProTaskStateById" parameterType="java.util.Map">
		UPDATE pro_task
		<set>
			state = #{state}
		</set>
		WHERE id = #{taskId}
	</update>
	
	<update id="editProTaskProcessStateById" parameterType="java.util.Map">
		UPDATE pro_task_process
		<set>
			state = #{processState}
		</set>
		WHERE id = #{id}
	</update>
	
	<select id="queryProTaskId" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			a.task_id id
		FROM
			pro_task_process a
		WHERE
			a.process_instance_id = #{processInstanceId}
	</select>
	
	<update id="editProTaskProcessToRevoke" parameterType="java.util.Map">
		UPDATE pro_task
		<set>
			state = '5'
		</set>
		WHERE id = #{id}
	</update>
	
	<delete id="deleteProTaskProcessToRevoke" parameterType="java.util.Map">
		DELETE
		FROM
			pro_task_process
		WHERE
			task_id = #{id}
		AND state = '0'
	</delete>
	
	<update id="updateProTaskToCancellation" parameterType="java.util.Map">
		UPDATE pro_task
		<set>
			state = '6'
		</set>
		WHERE id = #{id}
	</update>
	
	<select id="queryMyProTaskList" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT * FROM
			(SELECT
				a.id,
				a.task_name taskName,
				a.parent_id pId,
				true lay_is_open,
				e.project_name projectName,
				DATE_FORMAT(a.start_time, '%Y-%m-%d') startTime,
				DATE_FORMAT(a.end_time, '%Y-%m-%d') endTime,
				GROUP_CONCAT(distinct c.user_name) performId,
				a.create_id,
				a.perform_id,
				d.user_name createId,
				a.estimated_workload estimatedWorkload,
				IFNULL(f.process_instance_id, '') processInstanceId,
				IF(a.actual_workload = 0, '?', a.actual_workload) actualWorkload,
				a.state,
				IF((a.state = 0 OR a.state = 1 OR a.state = 12 OR a.state = 5), 1, -1) editRow,
				DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i') createTime,
				(a.estimated_workload - IFNULL(m.childWorkload,0)) restWorkload,
				'1' creater
			FROM
				pro_task a
				LEFT JOIN (SELECT a.id, SUM(b.estimated_workload) childWorkload FROM pro_task a, pro_task b WHERE b.parent_id != '0' AND b.parent_id = a.id AND (b.state = 11 OR b.state = 2 OR b.state = 3 OR b.state = 4) GROUP BY b.parent_id) m ON a.id = m.id
				LEFT JOIN sys_eve_user_staff c ON INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', c.user_id, ','))
				LEFT JOIN sys_eve_user_staff d ON a.create_id = d.user_id
				LEFT JOIN pro_task_process f ON a.id = f.task_id,
				pro_project e
			WHERE a.pro_id = e.id
				AND a.create_id = #{userId}
				GROUP BY a.id
			UNION ALL
			SELECT
				a.id,
				a.task_name taskName,
				a.parent_id pId,
				true lay_is_open,
				e.project_name projectName,
				DATE_FORMAT(a.start_time, '%Y-%m-%d') startTime,
				DATE_FORMAT(a.end_time, '%Y-%m-%d') endTime,
				GROUP_CONCAT(distinct c.user_name) performId,
				a.create_id,
				a.perform_id,
				d.user_name createId,
				a.estimated_workload estimatedWorkload,
				IFNULL(f.process_instance_id, '') processInstanceId,
				IF(a.actual_workload = 0, '?', a.actual_workload) actualWorkload,
				a.state,
				IF((a.state = 0 OR a.state = 1 OR a.state = 12 OR a.state = 5), 1, -1) editRow,
				DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i') createTime,
				(a.estimated_workload - IFNULL(m.childWorkload,0)) restWorkload,
				'0' creater
			FROM
				pro_task a
				LEFT JOIN (SELECT a.id, SUM(b.estimated_workload) childWorkload FROM pro_task a, pro_task b WHERE b.parent_id != '0' AND b.parent_id = a.id AND (b.state = 11 OR b.state = 2 OR b.state = 3 OR b.state = 4) GROUP BY b.parent_id) m ON a.id = m.id
				LEFT JOIN sys_eve_user_staff c ON INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', c.user_id, ','))
				LEFT JOIN sys_eve_user_staff d ON a.create_id = d.user_id
				LEFT JOIN pro_task_process f ON a.id = f.task_id,
				pro_project e
			WHERE a.pro_id = e.id
				AND (INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', #{userId}, ',')) AND a.create_id != #{userId})
				AND (a.state = 2 OR a.state = 3 OR a.state = 4)
			GROUP BY a.id) a
		WHERE 1 = 1
		<choose>
	        <when test="myRole == '1'.toString()">
	            AND a.create_id = #{userId}
	        </when>
	        <when test="myRole == '2'.toString()">
	            AND INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', #{userId}, ','))
	        </when>
	        <otherwise>
			    AND (a.create_id = #{userId}
				OR INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', #{userId}, ',')))
	        </otherwise>
    	</choose>
		<if test="taskName != '' and taskName != null">
			AND a.taskName like '%${taskName}%'
		</if>
		<if test="state != '' and state != null">
				AND a.state = #{state}
	        </if>
		<if test="firstTime != '' and firstTime != null and lastTime != '' and lastTime != null">
			AND a.startTime >= #{firstTime} AND #{lastTime} >= a.startTime
		</if>
		GROUP BY a.id
		ORDER BY a.createTime DESC
    </select>
    
    <update id="updateProTaskToExecutionBegin" parameterType="java.util.Map">
		UPDATE pro_task
		<set>
			state = '2'
		</set>
		WHERE id = #{id}
		AND state = '11'
	</update>
	
	<select id="queryRestWorkloadById" resultType="java.util.Map">
		SELECT
			CASE a.parent_id WHEN '0' THEN '1' ELSE '0' END isFather,
			(c.estimated_workload - SUM(IFNULL(b.estimated_workload, 0))) restWorkload,
			a.estimated_workload estimatedWorkload,
		    a.perform_id performId
		FROM
			pro_task a
		LEFT JOIN pro_task c ON a.parent_id = c.id
		LEFT JOIN pro_task b ON b.parent_id = a.parent_id AND ( b.state = 11 OR b.state = 2 OR b.state = 3 OR b.state = 4 )
		WHERE
			a.id = #{taskId}
	</select>
	
	<select id="queryProTaskMationByTaskId" resultType="java.util.Map">
		SELECT
			a.id,
			CASE a.parent_id WHEN '0' THEN '主任务' ELSE CONCAT(b.task_name,' [ 拆分子任务  ] ')END fatherOrSon,
			a.task_name taskName,
		    a.state,
			g.`name` taskTypeName,
			c.department_name departments,
			e.project_name projectName,
			DATE_FORMAT(a.start_time, '%Y-%m-%d') startTime,
			DATE_FORMAT(a.end_time, '%Y-%m-%d') endTime,
			(SELECT 
				GROUP_CONCAT(f.user_name)
			FROM
				pro_task a,
				sys_eve_user_staff f
			WHERE a.id = #{taskId}
			AND INSTR(CONCAT(',', a.perform_id, ','),CONCAT(',', f.user_id, ','))
			) performId,
		    a.perform_id executorIds,
			d.user_name createUserName,
			a.estimated_workload estimatedWorkload,
			a.task_instructions taskInstructions,
			a.enclosure_info enclosureInfo,
			DATE_FORMAT(a.create_time, '%Y-%m-%d %H:%i') createTime
		FROM
			pro_task a
			LEFT JOIN pro_task b ON a.parent_id = b.id
			LEFT JOIN sys_eve_user_staff d ON a.create_id = d.user_id,
			company_department c,
			pro_project e,
			pro_task_type g
		WHERE
			a.id = #{taskId}
		AND a.departments = c.id
		AND	a.pro_id = e.id
		AND a.task_type = g.id
	</select>
	
	<update id="updateProTaskToExecutionOver" parameterType="java.util.Map">
		UPDATE pro_task
		<set>
			state = '3',
			execution_enclosure_info = #{enclosureInfo},
			execution_result = #{executionResult}
		</set>
		WHERE id = #{id}
		AND (state = '2' OR state = '3')
	</update>
	
	<update id="updateProTaskToExecutionClose" parameterType="java.util.Map">
		UPDATE pro_task
		<set>
			state = '4'
		</set>
		WHERE id = #{id}
		AND state = '3'
	</update>
	
	<select id="queryProTaskInExecution" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			a.id,
			a.task_name `name`
		FROM
			pro_task a
		WHERE
			a.state = '2'
		AND a.pro_id = #{proId}
	</select>

</mapper>